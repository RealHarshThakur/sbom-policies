package vulnerability

import (
	"bytes"
	"context"
	"encoding/json"
	"io/ioutil"
	"net/http"

	"dagger.io/dagger"
)

// Response is the result of the vulnerability check.
type Response struct {
	Result Result `json:"result"`
}

// Result is the result of the vulnerability check.
type Result struct {
	AllowList []string       `json:"allow_list"`
	Deny      []DenyListItem `json:"deny"`
	VulnLevel []string       `json:"vuln_level"`
}

// DenyListItem contains the list of packages with vulnerabilities.
type DenyListItem struct {
	Negligible []string `json:"Negligible,omitempty"`
	Low        []string `json:"Low,omitempty"`
	Medium     []string `json:"Medium,omitempty"`
	High       []string `json:"High,omitempty"`
	Critical   []string `json:"Critical,omitempty"`
}

// Check sends a POST request to the OPA server to check the license.
func Check(url string, filename string) (*Response, error) {
	// Read JSON data from file
	data, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, err
	}

	requestBody := map[string]interface{}{
		"input": json.RawMessage(data),
	}

	requestBodyBytes, err := json.Marshal(requestBody)
	if err != nil {
		return nil, err
	}

	// Create HTTP POST request
	request, err := http.NewRequest("POST", url, bytes.NewReader(requestBodyBytes))
	if err != nil {
		return nil, err
	}

	// Set content type header to JSON
	request.Header.Set("Content-Type", "application/json")

	// Send HTTP POST request
	client := &http.Client{}
	response, err := client.Do(request)
	if err != nil {
		return nil, err
	}
	defer response.Body.Close()

	// Read response body
	responseBody, err := ioutil.ReadAll(response.Body)
	if err != nil {
		return nil, err
	}

	// Decode response JSON into struct
	var responseObject Response
	err = json.Unmarshal(responseBody, &responseObject)
	if err != nil {
		return nil, err
	}

	return &responseObject, nil
}

func GenerateV(ctx context.Context, client *dagger.Client, imagName string) error {
	_, err := client.Container().From("anchore/grype:latest").
		WithWorkdir("/tmp/artifacts").
		Exec((dagger.ContainerExecOpts{
			Args: []string{imagName, "-o", "json", "--file", "vuln.json"},
		})).
		Directory(".").
		Export(ctx, "/tmp/artifacts")
	if err != nil {
		return err
	}

	return nil
}
